#!/usr/bin/env bash
# Sexy bash prompt by twolfson
# https://github.com/twolfson/sexy-bash-prompt
# Forked from gf3, https://gist.github.com/gf3/306785

# Set iterm window title to PWD
# export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'


#
#
# COLORS
#
#

# If we are on a colored terminal
if tput setaf 1 &> /dev/null; then
  # Reset the shell from our `if` check
  tput sgr0 &> /dev/null

  # Save common color actions
  prompt_bold="$(tput bold)"
  color_reset="$(tput sgr0)"

  # If the terminal supports at least 256 colors, write out our 256 color based set
  if [[ "$(tput colors)" -ge 256 ]] &> /dev/null; then
    color_user="$(tput setaf 14)"
    color_preposition="$(tput setaf 8)"
    color_host="$(tput setaf 14)"
    color_dir="$(tput setaf 4)"
    color_git_status="$(tput setaf 10)"
    color_git_progress="$(tput setaf 9)"
  else
    # Otherwise, use colors from our set of 8
    color_user="$(tput setaf 4)"
    color_preposition="$(tput setaf 7)"
    color_host="$(tput setaf 4)"
    color_dir="$(tput setaf 8)"
    color_git_status="$(tput setaf 2)"
    color_git_progress="$(tput setaf 1)"
  fi

  color_prompt_symbol="$(tput setaf 11)"
  color_prompt_symbol_error="$(tput setaf 1)"

else
  # Otherwise, use ANSI escape sequences for coloring
  color_reset="\033[m"
  color_user="\033[1;34m" # BLUE
  color_preposition="\033[1;37m" # WHITE
  color_host="\033[1;36m" # CYAN
  color_dir="\033[1;32m" # GREEN
  color_git_status="\033[1;33m" # YELLOW
  color_git_progress="\033[1;31m" # RED
  color_prompt_symbol="" # NORMAL
fi


#
#
# SYMBOLS
#
#

# Set up symbols
prompt_symbol="λ"

synced_symbol=""
dirty_synced_symbol="*"

unpushed_symbol="△"
dirty_unpushed_symbol="▲"

unpulled_symbol="▽"
dirty_unpulled_symbol="▼"

unpushed_unpulled_symbol="⬡"
dirty_unpushed_unpulled_symbol="⬢"

#
#
# GIT INFO
#
#

function get_git_branch() {
  # On branches, this will return the branch name
  # On non-branches, (no branch)
  ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
  if [[ "$ref" != "" ]]; then
    echo "$ref"
  else
    echo "(no branch)"
  fi
}

function get_git_progress() {
  # Detect in-progress actions (e.g. merge, rebase)
  # https://github.com/git/git/blob/v1.9-rc2/wt-status.c#L1199-L1241
  git_dir="$(git rev-parse --git-dir)"

  # git merge
  if [[ -f "$git_dir/MERGE_HEAD" ]]; then
    echo " [merge]"
  elif [[ -d "$git_dir/rebase-apply" ]]; then
    # git am
    if [[ -f "$git_dir/rebase-apply/applying" ]]; then
      echo " [am]"
    # git rebase
    else
      echo " [rebase]"
    fi
  elif [[ -d "$git_dir/rebase-merge" ]]; then
    # git rebase --interactive/--merge
    echo " [rebase]"
  elif [[ -f "$git_dir/CHERRY_PICK_HEAD" ]]; then
    # git cherry-pick
    echo " [cherry-pick]"
  fi
  if [[ -f "$git_dir/BISECT_LOG" ]]; then
    # git bisect
    echo " [bisect]"
  fi
  if [[ -f "$git_dir/REVERT_HEAD" ]]; then
    # git revert --no-commit
    echo " [revert]"
  fi
}

is_branch1_behind_branch2 () {
  # $ git log origin/master..master -1
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # Find the first log (if any) that is in branch1 but not branch2
  first_log="$(git log $1..$2 -1 2> /dev/null)"

  # Exit with 0 if there is a first log, 1 if there is not
  [[ -n "$first_log" ]]
}

branch_exists () {
  # List remote branches           | # Find our branch and exit with 0 or 1 if found/not found
  git branch --remote 2> /dev/null | grep --quiet "$1"
}

parse_git_ahead () {
  # Grab the local and remote branch
  branch="$(get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log origin/master..master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the remote branch is behind the local branch
  # or it has not been merged into origin (remote branch doesn't exist)
  if (is_branch1_behind_branch2 "$remote_branch" "$branch" ||
      ! branch_exists "$remote_branch"); then
    # echo our character
    echo 1
  fi
}

parse_git_behind () {
  # Grab the branch
  branch="$(get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log master..origin/master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the local branch is behind the remote branch
  if is_branch1_behind_branch2 "$branch" "$remote_branch"; then
    # echo our character
    echo 1
  fi
}

function parse_git_dirty() {
  # If the git status has *any* changes (e.g. dirty), echo our character
  if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
    echo 1
  fi
}

function is_on_git() {
  git rev-parse 2> /dev/null
}

function get_git_status() {
  # Grab the git dirty and git behind
  dirty_branch="$(parse_git_dirty)"
  branch_ahead="$(parse_git_ahead)"
  branch_behind="$(parse_git_behind)"

  # Iterate through all the cases and if it matches, then echo
  if [[ "$dirty_branch" == 1 && "$branch_ahead" == 1 && "$branch_behind" == 1 ]]; then
    echo "$dirty_unpushed_unpulled_symbol"
  elif [[ "$branch_ahead" == 1 && "$branch_behind" == 1 ]]; then
    echo "$unpushed_unpulled_symbol"
  elif [[ "$dirty_branch" == 1 && "$branch_ahead" == 1 ]]; then
    echo "$dirty_unpushed_symbol"
  elif [[ "$branch_ahead" == 1 ]]; then
    echo "$unpushed_symbol"
  elif [[ "$dirty_branch" == 1 && "$branch_behind" == 1 ]]; then
    echo "$dirty_unpulled_symbol"
  elif [[ "$branch_behind" == 1 ]]; then
    echo "$unpulled_symbol"
  elif [[ "$dirty_branch" == 1 ]]; then
    echo "$dirty_synced_symbol"
  else # clean
    echo "$synced_symbol"
  fi
}

get_git_info () {
  # Grab the branch
  branch="$(get_git_branch)"

  # If there are any branches
  if [[ "$branch" != "" ]]; then
    # Echo the branch
    output="$branch"

    # Add on the git status
    output="$output$(get_git_status)"

    # Echo our output
    echo "$output"
  fi
}

#
#
# PROMPT
#
#

user_host_prompt () {
  # Only show username if not default
  local user_prompt=
  [ "$USER" != "$LOCAL_USERNAME" ] && user_prompt="$color_user$USER$color_reset"

  # Show hostname inside SSH session
  local host_prompt=
  [ -n "$SSH_CLIENT" ] && host_prompt="$color_host$HOSTNAME$color_reset"

  local login_delimiter=
  [ -n "$user_prompt" ] && [ -n "$host_prompt" ] && login_delimiter="$color_preposition:"

  if [[ -n "$user_prompt" ||  -n "$host_prompt" ]]; then
    echo -n "$user_prompt$login_delimiter$host_prompt  "
  fi

  echo -n ""
}

git_prompt () {
  if $(is_on_git); then
      echo -n "  $color_git_status$(get_git_info)" &&
      echo -n "$color_git_progress$(get_git_progress)"
  fi
  echo -n ""
}

function prompt_command() {
  prompt_status=$?

  prompt_symbol_color () {
    if [ $prompt_status = 0 ]; then
      echo -n "$color_prompt_symbol"
    else
      echo -n "$color_prompt_symbol_error"
    fi
  }

  first_line="\[\033]0;\W\007\]\$(user_host_prompt)\[$color_dir\]\w\[$color_reset\]\$(git_prompt)"
  second_line="\[$(prompt_symbol_color)\]\$prompt_symbol\[$color_reset\] "

  PS1="\n$first_line\n$second_line"
}

PROMPT_COMMAND=prompt_command
