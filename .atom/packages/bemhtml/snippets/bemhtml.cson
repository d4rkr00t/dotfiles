'.source.bem':
    'Object Method':
        'prefix': ':f'
        'body': '${1:method_name}: function (${2:attribute}) {\n\t$3\n}${4:,}'
    'Object key — key: \'value\'':
        'prefix': ':'
        'body': '${1:key}: ${2:\'${3:value}\'}${4:,}'
    'Prototype':
        'prefix': 'proto'
        'body': '${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {\n\t${0:// body...}\n};'
    'do':
        'prefix': 'do'
        'body': 'do {\n\t$2\n} while (${1:true});'
    'else':
        'prefix': 'else'
        'body': 'else {\n\t$1\n}'
    'for':
        'prefix' : 'for'
        'body' : 'for (var i = 0; i < ${1:array}.length; i++) {\n\t${2:array}[i]\n}'
    'for in':
        'prefix': 'forin'
        'body': 'for (${1:variable} in ${2:object}) {\n\t${5:if (${3:object}.hasOwnProperty(${4:variable})) {\n\t\t$6\n\t}}\n}'
    'Function':
        'prefix': 'fun'
        'body': 'function ${1:function_name}(${2:argument}) {\n\t${0:// body...}\n}'
    'Anonymous Function':
        'prefix': 'f'
        'body': 'function ($1) {\n\t$2\n}'
    'if … else':
        'prefix': 'ife'
        'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
    'if':
        'prefix': 'if'
        'body': 'if (${1:true}) {\n\t$2\n}'
    'Immediately-Invoked Function Expression':
        'prefix': 'iife'
        'body': '(function() {\n${1:\t\'use strict\';\n}\t$2\n}());'
    'log':
        'prefix': 'log'
        'body': 'console.log($1);$0'
    'warn':
        'prefix': 'warn'
        'body': 'console.warn($1);$0'
    'error':
        'prefix': 'error'
        'body': 'console.error($1);$0'
    'setInterval function':
        'prefix': 'interval'
        'body': 'setInterval(${2:function () {\n\t$3\n}}, ${1:10});'
    'setTimeout function':
        'prefix': 'timeout'
        'body': 'setTimeout(${2:function () {\n\t$3\n}}, ${1:10});'
    'switch':
        'prefix': 'switch'
        'body': 'switch (${1:expression}) {\ncase ${2:expression}:\n\t$4\n\tbreak;$5\ndefault:\n\t$3\n}'
    'try':
        'prefix': 'try'
        'body': 'try {\n\t${1:statements}\n} catch (${2:variable}) {\n\t${3:statements}\n}${4: finally {\n\t${5:statements}\n}}'
    'while':
        'prefix': 'while'
        'body': 'while (${1:true}) {\n\t$2\n}'
    'block':
        'prefix': 'b'
        'body': 'block ${1:blockName}${2:,}'
    'block: \'blockName\',':
        'prefix': 'b:'
        'body': 'block: ${1:\'${2:blockName}\'}${3:,}'
    'elem':
        'prefix': 'e'
        'body': 'elem ${1:elemName}${2:,}'
    'elem: \'elemName\'':
        'prefix': 'e:'
        'body': 'elem: ${1:\'${2:elemName}\'}${3:,}'
    'block elem':
        'prefix': 'be'
        'body': 'block ${1:blockName}, elem ${2:elemName}${3:,}'
    'mod':
        'prefix': 'm'
        'body': 'mod ${1:modName} ${2:modValue}${3:,}'
    'mods':
        'prefix': 'm:'
        'body': 'mods: {\n\t${1:modName}: ${2:\'${3:modValue}\'}${4:}\n}${5:,}'
    'elemMod':
        'prefix': 'em'
        'body': 'elemMod ${1:modName} ${2:modValue}${3:,}'
    'elemMods':
        'prefix': 'em:'
        'body': 'elemMods: {\n\t${1:modName}: ${2:\'${3:modValue}\'}${4:}\n}${5:,}'
    'mix':
        'prefix': 'mi:'
        'body': 'mix: [ { block: ${1:\'${2:blockName}\'} } ]'
    'content:':
        'prefix': 'c:'
        'body': 'content: [\n\t{\n\t\t${1:...}\n\t}\n]'
    'js':
        'prefix': 'js:'
        'body': 'js: {\n\t${1:...}\n}'
    'tag':
        'prefix': 't:'
        'body': 'tag: ${1:\'${2:tagName}\'}${3:,}'
    'attrs':
        'prefix': 'a:'
        'body': 'attrs: {\n\t${1:...}\n}'
    'cls':
        'prefix': 'cl:'
        'body': 'cls: ${1:\'${2:className}\'}${3:,}'
    'bem false':
        'prefix': 'bf:'
        'body': 'bem: false${1:,}'
