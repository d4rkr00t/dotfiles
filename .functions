# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_"
}

function mkpr() {
  ./bin/mkproject.sh $1 && cd $1/web3 && make clean && make && gitor && git go SERP-$1 && echo && echo -en "\033[0;33m======= Project created =======\033[0m" && echo && echo 'http://sysoev-d-'$1'.spb.serp.yandex.ru' && echo -e "\a"
}

function mkprwtp() {
  ./bin/mkproject.sh $1 $2 web_touch_phone && cd $1/web_touch_phone && make clean && make && gitor git@github.yandex-team.ru:sysoev/web-touch-phone.git && git go SERP-$2 && echo && echo -en "\033[0;33m======= Project created =======\033[0m" && echo && echo 'http://sysoev-d-'$1'.spb.serp.yandex.ru' && echo -e "\a"
}

# Get random string from file
function rndstr(){
  local count=$2
  : ${count:=-1}
  f=$1; n=$(expr $RANDOM \* `cat $f | wc -l` \/ 32768 + 1); head -n $n $f | tail $count
}

# Change git origin and add upstream
function gitor() {
    local url=$1

    if [ -d .git ]; then
      if [[ $url != http* && $url != git@* && ! -z "$url" ]]; then
          local url="https://github.yandex-team.ru/$1.git"
      fi

      if [[ -z "$url" ]]; then
          local url="git@github.yandex-team.ru:sysoev/web3.git"
      fi

      if ! git remote | grep upstream > /dev/null; then
          git remote rename origin upstream
          git remote add origin $url
      fi

      git remote -v
    else
      echo "-=-=-=->> There isn't a git repo! <<-=-=-=-"
    fi;
}

function gitores() {
    if [ -d .git ]; then
      if git remote | grep upstream > /dev/null; then
          git remote rm origin
          git remote rename upstream origin
      fi

      git remote -v
    else
      echo "-=-=-=->> There isn't a git repo! <<-=-=-=-"
    fi;
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
    if [ $# -eq 0 ]; then
        subl -a .
    else
        subl -a "$@"
    fi
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
    if [ $# -eq 0 ]; then
        atom .
    else
        atom "$@"
    fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# sanitize filename: lowercase, no other characters than letters, digits, dash, underscore and dot
function sanitize() {
    for file in *; do
       file_clean=`echo $file | tr '[:upper:]' '[:lower:]' | tr -cd "[:alnum:]-_."`
       if [ "${file}" != "${file_clean}" ]; then
           echo "$file > $file_clean"
           mv "$file" "$file_clean"
       fi
    done
}

# GitHub URL for current repo.
function ghurl() {
  local remotename="${@:-origin}"
  local remote="$(git remote -v | awk '/^'"$remotename"'.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*:\/\///;s/\.git$//;s/git@//;s/\:/\//')"
  echo "https://$user_repo"
}

# Quickly get image dimensions from the command line
function imgsize() {
  local width height
  if [[ -f $1 ]]; then
    height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
    width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
    echo "${width} x ${height}"
  else
    echo "File not found"
  fi
}

# SSHFS mount
function sshfsmount() {
  local mountPath="/Volumes/sshfs"

  mkdir -p $mountPath

  sshfs -o Ciphers=arcfour -o Compression=yes -o auto_cache,reconnect,defer_permissions,noappledouble -o workaround=nodelaysrv -o cache_stat_timeout=600 -o IdentityFile=~/.ssh/id_rsa $1 $mountPath
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}
