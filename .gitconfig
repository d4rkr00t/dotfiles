[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	lg = log --color --graph -n 20 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset'  --abbrev-commit --date=short --decorate

	# View the current working tree status using the short format
	st = status -sb

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Show verbose output about tags, branches or remotes
	t   = tag -l
	br  = branch -a
	rem = remote -v

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# View last commit
    last = log --graph --decorate --pretty=oneline --abbrev-commit -1 --stat --date=short
	ld = log -p -1

    # Watch my commits for last day
    standup = log --since '1 day ago' --oneline --author d4rkr00t@gmail.com

    # git in / git out — смотреть какие коммиты придут/уйдут перед выполнением pull/push
	in = "!git remote update -p; git log ..@{u}"
	out = log @{u}..

    a   = add
    all = add -A :/
    br  = branch
    ci  = commit -m
    cia = commit -am
    cid = rev-parse HEAD
    co  = checkout
    df  = diff --color --color-words --abbrev
    f = fetch
    fa = fetch --all
    r = "rebase"
    ri = "!r() { git rebase -i HEAD~$1; }; r"
	s = stash
	sa = stash apply

    # rebase shortcuts
    rom = rebase origin/master
    rud = rebase upstream/dev

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow
	frag = magenta # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vimdiff

[push]
	default = current

[branch]
    autosetuprebase = always

[user]
	email = "d4rkr00t@gmail.com"
	name = "Stanislav Sysoev"

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"
