[alias]
  #
  # Add / Commit / Clone / Checkout etc.
  #

  a   = add
  all = add -A :/
  ai = add --interactive
  abr = absorb --and-rebase
  ame = commit --amend
  amq = commit --amend --reuse-message=HEAD
  ci = commit -m
  cid = rev-parse HEAD
  co = checkout
  cl = clone
  cp = cherry-pick
  wip = "!f(){ git commit -m \"[$(date +\"%d.%m.%y %T\")]: WIP\"; }; f"

  #
  # Branches
  #

  br = branch
  bra = branch -a
  brd = branch -D

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  #
  # Diff
  #

  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  dc = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat --cached"
  di = !"git --no-pager diff --ignore-space-change"
  dii = !"git --no-pager diff --ignore-space-change --color-words --diff-algorithm=patience"
  ds = diff --stat

  #
  # Find
  #

  fb = "!f() { git branch -a --contains $1; }; f" # Find branches containing commit
  ft = "!f() { git describe --always --contains $1; }; f" # Find tags containing commit

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  #
  # Fetch
  #

  f = fetch
  fa = fetch --all
  fs = "!r() { git fetch $1 $2:$2 && git checkout $2; }; r" # fetch and checkout single remote branch

  #
  # Info
  #

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  conflict = "!f(){ git ls-files -u | awk '{print $4}' | sort -u; }; f"

  # get closest parent branch
  parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"

  ref = reflog -n 25 --format=ref

  # List remotes
  rem = remote -v

  st = status -sb

  # Watch my commits for last day
  standup = log --since '1 day ago' --oneline --author d4rkr00t@gmail.com

  # List all tags
  t = tag -l

  #
  # Log
  #

  last = log --graph --decorate --oneline -1 --stat # last commit stats
  lg = log --color --graph -n 20 --pretty=custom --abbrev-commit --date=short --decorate
  lgm = "!r() { git lg --merges; }; r"
  lgnl = "!r() { git lg | nl; }; r"
  ld = log -p -1 # last commit diff
  lp = log --branches --not --remotes --decorate --oneline # commits to push
  lst = log --graph --decorate --oneline -1 --stat HEAD^..HEAD

  #
  # Rebase
  #

  r = rebase
  ri = "!r() { git rebase -i HEAD~$1; }; r"
  rom = "!r() { git fetch origin master && git rebase origin/master; }; r"
  rum = "!r() { git fetch upstream master && rebase upstream/master; }; r"
  rc = rebase --continue
  rig = "!r(){ git ls-files --ignored --exclude-standard | xargs git rm; }; r" # untrack ignored files

  #
  # Stash
  #

  s = stash
  sa = stash apply

  #
  # Misc
  #

  resref = "!r() { git reset --hard HEAD@{$1}; }; r"
  cleanit = clean -fd

  # Instantly clean a git repo from extraneous files in a non-blocking fashion
   purge = "!f() { \
     declare tmp_dir=$(mktemp -d); \
     git clean -fdxn | sed -n s'/^Would remove \\(.*\\)/\\1/p' | xargs -I % mv \"%\" \"$tmp_dir\"; \
    (rm -rf \"$tmp_dir\" &); \
  }; f"

  # Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
  # Use: `git gh-pr 123` or `git gh-pr 123 upstream`
  pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1' -

  tr = "!r() { git checkout --track $1; }; r" # checkout and track branch


[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[feature]
  manyFiles = true

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Git and the Umlaut problem on Mac OS X
  # Prevent showing files which filenames contains umlauts as unversioned
  # Needs to be false since OS X 10.9.x
  # See http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  fsmonitor = true

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow
  frag = magenta # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = vimdiff

[pretty]
  custom = "%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset"
  ref = "%Cred%h%Creset %<|(17)%gd %C(blue)%ci%C(reset) %gs (%s)"

[push]
  default = current

[branch]
  autosetuprebase = always

  # Show most recently changed branches first.
  sort = -committerdate

[user]
  email = "d4rkr00t@gmail.com"
  name = "Stanislav Sysoev"

[includeIf "gitdir:~/Work/"]
  path = ~/Work/.gitconfig-work

[diff]
  # Detect copies as well as renames
  renames = copies
  # (git 2.9+) Set this option to `true` to enable an experimental heuristic that
  # shifts the hunk boundary in an attempt to make the resulting
  # patch easier to read.
  indentHeuristic = true
  # Moved lines of code are colored differently.
  colorMoved = default
  # removes a/ and b/ prefixes from file names
  noprefix = false

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[filter "lfs"]
  required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[lfs]
  batch = true
  concurrenttransfers = 15

[trace2]
	eventTarget = /Users/ssysoev/.gittrace/dump
	configparams = custom.metacommands
	eventBrief = true

[init]
	defaultBranch = main
